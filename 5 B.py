# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FvUDvDq5E5wdtUxjey_Wf6UAQlC9Uo_a
"""

#-------------------------------------------------------------------------
# AUTHOR: Earaga
# FILENAME: naive_bayes.py
# SPECIFICATION: Classify using Naive Bayes and print predictions with confidence >= 0.75
# FOR: CS 4210 - Assignment #2
# TIME SPENT: ~30 minutes
#-------------------------------------------------------------------------

# You are allowed to use any Python library to complete this program

from sklearn.naive_bayes import GaussianNB
import pandas as pd
from sklearn.preprocessing import LabelEncoder

dbTraining = []
dbTest = []

# Reading the training data
df_train = pd.read_csv('weather_training.csv')
for _, row in df_train.iterrows():
    dbTraining.append(row.tolist())

# Encode features to numbers
le_outlook = LabelEncoder()
le_temp = LabelEncoder()
le_humidity = LabelEncoder()
le_wind = LabelEncoder()
le_label = LabelEncoder()

X = []
Y = []

for row in dbTraining:
    outlook = le_outlook.fit(df_train['Outlook']).transform([row[1]])[0]
    temp = le_temp.fit(df_train['Temperature']).transform([row[2]])[0]
    humidity = le_humidity.fit(df_train['Humidity']).transform([row[3]])[0]
    wind = le_wind.fit(df_train['Wind']).transform([row[4]])[0]
    X.append([outlook, temp, humidity, wind])

    label = le_label.fit(df_train['PlayTennis']).transform([row[5]])[0]
    Y.append(label)

# Train Naive Bayes with GaussianNB
clf = GaussianNB()
clf.fit(X, Y)

# Reading test data
df_test = pd.read_csv('weather_test.csv')
for _, row in df_test.iterrows():
    dbTest.append(row.tolist())

# Print header
print("Day\tOutlook\tTemperature\tHumidity\tWind\tPlayTennis\tConfidence")

# Predict test instances
for row in dbTest:
    outlook = le_outlook.transform([row[1]])[0]
    temp = le_temp.transform([row[2]])[0]
    humidity = le_humidity.transform([row[3]])[0]
    wind = le_wind.transform([row[4]])[0]

    probs = clf.predict_proba([[outlook, temp, humidity, wind]])[0]
    predicted_index = probs.argmax()
    confidence = probs[predicted_index]

    if confidence >= 0.75:
        prediction = le_label.inverse_transform([predicted_index])[0]
        print(f"{row[0]}\t{row[1]}\t{row[2]}\t{row[3]}\t{row[4]}\t{prediction}\t{round(confidence, 2)}")