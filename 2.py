# -*- coding: utf-8 -*-
"""Untitled5.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1FvUDvDq5E5wdtUxjey_Wf6UAQlC9Uo_a
"""

#-------------------------------------------------------------------------
# AUTHOR:Earaga
# FILENAME: decision_tree_2.py
# SPECIFICATION: Train decision trees with max_depth=5 on 3 datasets, test, and compute avg accuracy over 10 runs
# FOR: CS 4210- Assignment #2
# TIME SPENT: ~30 minutes
#-------------------------------------------------------------------------

# You are allowed to use any Python library to complete this program

from sklearn import tree
import pandas as pd
from sklearn.preprocessing import LabelEncoder
from sklearn.metrics import accuracy_score
import numpy as np

dataSets = ['contact_lens_training_1.csv', 'contact_lens_training_2.csv', 'contact_lens_training_3.csv']

# Reading the test data into a list
dbTest = []
df_test = pd.read_csv('contact_lens_test.csv')
for _, row in df_test.iterrows():
    dbTest.append(row.tolist())

# Process each training set
for ds in dataSets:
    dbTraining = []
    X = []
    Y = []

    # Reading the training data
    df_train = pd.read_csv(ds)
    dbTraining = df_train.values.tolist()

    # Label encoding setup (for consistent mapping across both train and test)
    le_list = [LabelEncoder() for _ in range(len(df_train.columns)-1)]  # For features only

    # Transform training features
    for i in range(len(dbTraining)):
        X_instance = []
        for j in range(len(dbTraining[i])-1):  # Skip the label
            val = dbTraining[i][j]
            val = le_list[j].fit(df_train.iloc[:, j]).transform([val])[0]
            X_instance.append(val)
        X.append(X_instance)
        Y.append(1 if dbTraining[i][-1] == 'Yes' else 2)

    accuracies = []

    for i in range(10):  # repeat 10 times
        clf = tree.DecisionTreeClassifier(criterion='entropy', max_depth=5, random_state=i)
        clf = clf.fit(X, Y)

        # Prepare the test set
        correct = 0
        total = 0
        for instance in dbTest:
            test_instance = []
            for j in range(len(instance)-1):  # exclude class label
                test_val = le_list[j].transform([instance[j]])[0]
                test_instance.append(test_val)

            predicted = clf.predict([test_instance])[0]
            actual